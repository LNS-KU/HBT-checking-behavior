import cv2
from tkinter import Tk, filedialog

# Initialize Tkinter
root = Tk()
root.withdraw()  # Hide the main window

# Ask the user to select a video file
video_path = filedialog.askopenfilename(title="Select Video File", filetypes=[("Video Files", "*.mp4;*.avi;*.mov")])
if not video_path:  # Check if the user canceled file selection
    print("No video file selected. Exiting...")
    exit()

# Open the video file
cap = cv2.VideoCapture(video_path)

# Read the first frame
ret, frame = cap.read()

# Check if the frame is successfully read
if ret:
    # Store the original frame
    original_frame = frame.copy()

    # Define the callback function for mouse events
    def draw_circle(event, x, y, flags, param):
        global center, radius, drawing, mode

        if event == cv2.EVENT_LBUTTONDOWN:
            drawing = True
            center = (int(x / zoom_factor), int(y / zoom_factor))
            radius = 0

        elif event == cv2.EVENT_MOUSEMOVE:
            if drawing:
                radius = max(int(abs(x / zoom_factor - center[0])), int(abs(y / zoom_factor - center[1])))

        elif event == cv2.EVENT_LBUTTONUP:
            drawing = False
            cv2.circle(frame, center, radius, (0, 255, 0), 1)  # Changed border thickness
            print("Center coordinates:", center)
            print("Radius length:", radius)

            # Add crossmark
            cv2.line(frame, (center[0] - 5, center[1]), (center[0] + 5, center[1]), (0, 0, 255), 1)
            cv2.line(frame, (center[0], center[1] - 5), (center[0], center[1] + 5), (0, 0, 255), 1)

    # Function to draw grid on the image
    def draw_grid(image, spacing, alpha=0.5):
        overlay = image.copy()
        height, width, _ = image.shape
        for y in range(0, height, spacing):
            cv2.line(overlay, (0, y), (width, y), (255, 0, 0, int(255 * alpha)), 1, cv2.LINE_AA)
        for x in range(0, width, spacing):
            cv2.line(overlay, (x, 0), (x, height), (255, 0, 0, int(255 * alpha)), 1, cv2.LINE_AA)
        cv2.addWeighted(overlay, alpha, image, 1 - alpha, 0, image)

    # Function to add text on image
    def add_text(image, text, position, font=cv2.FONT_HERSHEY_SIMPLEX, font_scale=0.5, color=(0, 0, 0), thickness=1):
        text_size = cv2.getTextSize(text, font, font_scale, thickness)[0]
        text_x, text_y = position
        cv2.putText(image, text, (text_x - text_size[0], text_y + text_size[1]), font, font_scale, color, thickness, cv2.LINE_AA)

    # Function to undo the last drawn circle
    def undo_last_circle(image):
        if len(drawing_history) > 0:
            image[:] = original_frame  # Restore the original frame
            drawing_history.pop()  # Remove the latest drawn circle
            for center, radius in drawing_history:
                cv2.circle(image, center, radius, (0, 255, 0), 1)  # Redraw remaining circles

    # Initialize variables
    center = (-1, -1)
    radius = 0
    drawing = False
    zoom_factor = 1.0
    grid_spacing = 40  # Set grid spacing
    drawing_history = []  # Store the drawn circles

    # Set up the window and callback
    cv2.namedWindow('image')
    cv2.setMouseCallback('image', draw_circle)

    # Main loop
    while True:
        # Apply zoom to the frame
        zoomed_frame = cv2.resize(frame, None, fx=zoom_factor, fy=zoom_factor)

        # Draw grid on the zoomed frame
        draw_grid(zoomed_frame, grid_spacing, alpha=0.5)

        # Add text on the zoomed frame
        text_lines = ["+: zoom in", "-: zoom out", "q: quit", "u: undo"]
        text_x = zoomed_frame.shape[1] - 10
        text_y = 20
        for line in text_lines:
            add_text(zoomed_frame, line, (text_x, text_y), color=(0, 0, 0))
            text_y += 20

        cv2.imshow('image', zoomed_frame)
        key = cv2.waitKey(1) & 0xFF

        # Zoom in/out with '+'/'-' keys
        if key == ord('+'):
            zoom_factor += 0.1
        elif key == ord('-'):
            zoom_factor = max(0.1, zoom_factor - 0.1)

        # Undo the last drawn circle with 'u' key
        elif key == ord('u'):
            undo_last_circle(frame)

        # Press 'q' to exit
        elif key == ord('q'):
            break

        # Update the drawing history
        if drawing:
            frame[:] = original_frame  # Restore the original frame
            cv2.circle(frame, center, radius, (0, 255, 0), 1)  # Draw the circle while mouse button is pressed
            
            # Add crossmark
            cv2.line(frame, (center[0] - 5, center[1]), (center[0] + 5, center[1]), (0, 0, 255), 1)
            cv2.line(frame, (center[0], center[1] - 5), (center[0], center[1] + 5), (0, 0, 255), 1)
            
            cv2.imshow('image', cv2.resize(frame, None, fx=zoom_factor, fy=zoom_factor))

        # Save the circle when mouse button is released
        elif not drawing and radius != 0:
            drawing_history.append((center, radius))
            center = (-1, -1)
            radius = 0

    cv2.destroyAllWindows()

else:
    print("Error: Unable to read the first frame from the video file.")

# Release the video capture object
cap.release()
